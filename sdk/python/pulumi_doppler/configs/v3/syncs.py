# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['SyncsArgs', 'Syncs']

@pulumi.input_type
class SyncsArgs:
    def __init__(__self__, *,
                 data: Any,
                 integration: pulumi.Input[str],
                 await_initial_sync: Optional[pulumi.Input[bool]] = None,
                 import_option: Optional[pulumi.Input['SyncsImportOption']] = None):
        """
        The set of arguments for constructing a Syncs resource.
        :param Any data: Configuration data for the sync
        :param pulumi.Input[str] integration: The integration slug which the sync will use
        :param pulumi.Input[bool] await_initial_sync: Causes sync creation to wait for the initial sync to complete before returning.
        :param pulumi.Input['SyncsImportOption'] import_option: An option indicating if and how Doppler should attempt to import secrets from the sync destination
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "integration", integration)
        if await_initial_sync is None:
            await_initial_sync = True
        if await_initial_sync is not None:
            pulumi.set(__self__, "await_initial_sync", await_initial_sync)
        if import_option is None:
            import_option = 'none'
        if import_option is not None:
            pulumi.set(__self__, "import_option", import_option)

    @property
    @pulumi.getter
    def data(self) -> Any:
        """
        Configuration data for the sync
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Any):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def integration(self) -> pulumi.Input[str]:
        """
        The integration slug which the sync will use
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter(name="awaitInitialSync")
    def await_initial_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        Causes sync creation to wait for the initial sync to complete before returning.
        """
        return pulumi.get(self, "await_initial_sync")

    @await_initial_sync.setter
    def await_initial_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "await_initial_sync", value)

    @property
    @pulumi.getter(name="importOption")
    def import_option(self) -> Optional[pulumi.Input['SyncsImportOption']]:
        """
        An option indicating if and how Doppler should attempt to import secrets from the sync destination
        """
        return pulumi.get(self, "import_option")

    @import_option.setter
    def import_option(self, value: Optional[pulumi.Input['SyncsImportOption']]):
        pulumi.set(self, "import_option", value)


class Syncs(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 await_initial_sync: Optional[pulumi.Input[bool]] = None,
                 data: Optional[Any] = None,
                 import_option: Optional[pulumi.Input['SyncsImportOption']] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Syncs resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] await_initial_sync: Causes sync creation to wait for the initial sync to complete before returning.
        :param Any data: Configuration data for the sync
        :param pulumi.Input['SyncsImportOption'] import_option: An option indicating if and how Doppler should attempt to import secrets from the sync destination
        :param pulumi.Input[str] integration: The integration slug which the sync will use
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyncsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Syncs resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SyncsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyncsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 await_initial_sync: Optional[pulumi.Input[bool]] = None,
                 data: Optional[Any] = None,
                 import_option: Optional[pulumi.Input['SyncsImportOption']] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyncsArgs.__new__(SyncsArgs)

            if await_initial_sync is None:
                await_initial_sync = True
            __props__.__dict__["await_initial_sync"] = await_initial_sync
            if data is None and not opts.urn:
                raise TypeError("Missing required property 'data'")
            __props__.__dict__["data"] = data
            if import_option is None:
                import_option = 'none'
            __props__.__dict__["import_option"] = import_option
            if integration is None and not opts.urn:
                raise TypeError("Missing required property 'integration'")
            __props__.__dict__["integration"] = integration
            __props__.__dict__["sync"] = None
        super(Syncs, __self__).__init__(
            'doppler-native:configs/v3:Syncs',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Syncs':
        """
        Get an existing Syncs resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SyncsArgs.__new__(SyncsArgs)

        __props__.__dict__["await_initial_sync"] = None
        __props__.__dict__["data"] = None
        __props__.__dict__["import_option"] = None
        __props__.__dict__["integration"] = None
        __props__.__dict__["sync"] = None
        return Syncs(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="awaitInitialSync")
    def await_initial_sync(self) -> pulumi.Output[Optional[bool]]:
        """
        Causes sync creation to wait for the initial sync to complete before returning.
        """
        return pulumi.get(self, "await_initial_sync")

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Any]:
        """
        Configuration data for the sync
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="importOption")
    def import_option(self) -> pulumi.Output[Optional['SyncsImportOption']]:
        """
        An option indicating if and how Doppler should attempt to import secrets from the sync destination
        """
        return pulumi.get(self, "import_option")

    @property
    @pulumi.getter
    def integration(self) -> pulumi.Output[str]:
        """
        The integration slug which the sync will use
        """
        return pulumi.get(self, "integration")

    @property
    @pulumi.getter
    def sync(self) -> pulumi.Output[Optional['outputs.SyncProperties']]:
        return pulumi.get(self, "sync")

