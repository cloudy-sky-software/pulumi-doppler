# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetIntegrationProperties',
    'GetIntegrationPropertiesIntegrationProperties',
    'IntegrationProperties',
    'ListIntegrationsProperties',
    'ListIntegrationsPropertiesIntegrationsItemProperties',
]

@pulumi.output_type
class GetIntegrationProperties(dict):
    def __init__(__self__, *,
                 integration: Optional['outputs.GetIntegrationPropertiesIntegrationProperties'] = None):
        if integration is not None:
            pulumi.set(__self__, "integration", integration)

    @property
    @pulumi.getter
    def integration(self) -> Optional['outputs.GetIntegrationPropertiesIntegrationProperties']:
        return pulumi.get(self, "integration")


@pulumi.output_type
class GetIntegrationPropertiesIntegrationProperties(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class IntegrationProperties(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ListIntegrationsProperties(dict):
    def __init__(__self__, *,
                 integrations: Optional[Sequence['outputs.ListIntegrationsPropertiesIntegrationsItemProperties']] = None,
                 success: Optional[bool] = None):
        if integrations is not None:
            pulumi.set(__self__, "integrations", integrations)
        if success is None:
            success = True
        if success is not None:
            pulumi.set(__self__, "success", success)

    @property
    @pulumi.getter
    def integrations(self) -> Optional[Sequence['outputs.ListIntegrationsPropertiesIntegrationsItemProperties']]:
        return pulumi.get(self, "integrations")

    @property
    @pulumi.getter
    def success(self) -> Optional[bool]:
        return pulumi.get(self, "success")


@pulumi.output_type
class ListIntegrationsPropertiesIntegrationsItemProperties(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if enabled is None:
            enabled = True
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


