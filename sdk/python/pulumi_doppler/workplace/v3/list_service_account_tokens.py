# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ListServiceAccountTokensResult',
    'AwaitableListServiceAccountTokensResult',
    'list_service_account_tokens',
    'list_service_account_tokens_output',
]

@pulumi.output_type
class ListServiceAccountTokensResult:
    def __init__(__self__, items=None):
        if items and not isinstance(items, dict):
            raise TypeError("Expected argument 'items' to be a dict")
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> 'outputs.ListServiceAccountTokensProperties':
        return pulumi.get(self, "items")


class AwaitableListServiceAccountTokensResult(ListServiceAccountTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListServiceAccountTokensResult(
            items=self.items)


def list_service_account_tokens(service_account: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListServiceAccountTokensResult:
    """
    Use this data source to access information about an existing resource.

    :param str service_account: Slug of the service account
    """
    __args__ = dict()
    __args__['serviceAccount'] = service_account
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:workplace/v3:listServiceAccountTokens', __args__, opts=opts, typ=ListServiceAccountTokensResult).value

    return AwaitableListServiceAccountTokensResult(
        items=pulumi.get(__ret__, 'items'))


@_utilities.lift_output_func(list_service_account_tokens)
def list_service_account_tokens_output(service_account: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListServiceAccountTokensResult]:
    """
    Use this data source to access information about an existing resource.

    :param str service_account: Slug of the service account
    """
    ...
