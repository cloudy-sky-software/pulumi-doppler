# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WebhooksArgs', 'Webhooks']

@pulumi.input_type
class WebhooksArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 authentication: Optional[pulumi.Input['AuthenticationPropertiesArgs']] = None,
                 enable_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Webhooks resource.
        :param pulumi.Input[str] url: The webhook URL. Must be https
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enable_configs: Config slugs that the webhook should be enabled for
        :param pulumi.Input[str] payload: See: https://docs.doppler.com/docs/webhooks#default-payload
        :param pulumi.Input[str] secret: See: https://docs.doppler.com/docs/webhooks#verify-webhook-with-request-signing
        """
        pulumi.set(__self__, "url", url)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if enable_configs is not None:
            pulumi.set(__self__, "enable_configs", enable_configs)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The webhook URL. Must be https
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AuthenticationPropertiesArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AuthenticationPropertiesArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="enableConfigs")
    def enable_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Config slugs that the webhook should be enabled for
        """
        return pulumi.get(self, "enable_configs")

    @enable_configs.setter
    def enable_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enable_configs", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        See: https://docs.doppler.com/docs/webhooks#default-payload
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        See: https://docs.doppler.com/docs/webhooks#verify-webhook-with-request-signing
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


class Webhooks(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[pulumi.InputType['AuthenticationPropertiesArgs']]] = None,
                 enable_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Webhooks resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enable_configs: Config slugs that the webhook should be enabled for
        :param pulumi.Input[str] payload: See: https://docs.doppler.com/docs/webhooks#default-payload
        :param pulumi.Input[str] secret: See: https://docs.doppler.com/docs/webhooks#verify-webhook-with-request-signing
        :param pulumi.Input[str] url: The webhook URL. Must be https
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebhooksArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Webhooks resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebhooksArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebhooksArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[pulumi.InputType['AuthenticationPropertiesArgs']]] = None,
                 enable_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebhooksArgs.__new__(WebhooksArgs)

            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["enable_configs"] = enable_configs
            __props__.__dict__["payload"] = payload
            __props__.__dict__["secret"] = secret
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        super(Webhooks, __self__).__init__(
            'doppler-native:webhooks/v3:Webhooks',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Webhooks':
        """
        Get an existing Webhooks resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WebhooksArgs.__new__(WebhooksArgs)

        __props__.__dict__["authentication"] = None
        __props__.__dict__["enable_configs"] = None
        __props__.__dict__["payload"] = None
        __props__.__dict__["secret"] = None
        __props__.__dict__["url"] = None
        return Webhooks(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[Optional['outputs.AuthenticationProperties']]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="enableConfigs")
    def enable_configs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Config slugs that the webhook should be enabled for
        """
        return pulumi.get(self, "enable_configs")

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Output[Optional[str]]:
        """
        See: https://docs.doppler.com/docs/webhooks#default-payload
        """
        return pulumi.get(self, "payload")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        """
        See: https://docs.doppler.com/docs/webhooks#verify-webhook-with-request-signing
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The webhook URL. Must be https
        """
        return pulumi.get(self, "url")

