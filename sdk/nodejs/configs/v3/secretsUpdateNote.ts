// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

export class SecretsUpdateNote extends pulumi.CustomResource {
    /**
     * Get an existing SecretsUpdateNote resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SecretsUpdateNote {
        return new SecretsUpdateNote(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler-native:configs/v3:SecretsUpdateNote';

    /**
     * Returns true if the given object is an instance of SecretsUpdateNote.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretsUpdateNote {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretsUpdateNote.__pulumiType;
    }

    /**
     * Deprecated: Config is no longer required as notes have always been set at the project level.
     */
    public readonly config!: pulumi.Output<string | undefined>;
    public readonly note!: pulumi.Output<string>;
    /**
     * Unique identifier for the project object.
     */
    public readonly project!: pulumi.Output<string>;
    public readonly secret!: pulumi.Output<string>;

    /**
     * Create a SecretsUpdateNote resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretsUpdateNoteArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.note === undefined) && !opts.urn) {
                throw new Error("Missing required property 'note'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.secret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secret'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["note"] = (args ? args.note : undefined) ?? "YOUR_NOTE";
            resourceInputs["project"] = (args ? args.project : undefined) ?? "PROJECT_NAME";
            resourceInputs["secret"] = (args ? args.secret : undefined) ?? "SECRET_NAME";
        } else {
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["note"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretsUpdateNote.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SecretsUpdateNote resource.
 */
export interface SecretsUpdateNoteArgs {
    /**
     * Deprecated: Config is no longer required as notes have always been set at the project level.
     */
    config?: pulumi.Input<string>;
    /**
     * The note you want to set on the secret. This note will be applied to the specified secret in all environments.
     */
    note: pulumi.Input<string>;
    /**
     * Unique identifier for the project object.
     */
    project: pulumi.Input<string>;
    /**
     * The name of the secret
     */
    secret: pulumi.Input<string>;
}
