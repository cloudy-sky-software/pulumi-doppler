// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export function getServiceAccountToken(args: GetServiceAccountTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceAccountTokenResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("doppler-native:workplace/v3:getServiceAccountToken", {
        "apiToken": args.apiToken,
        "serviceAccount": args.serviceAccount,
    }, opts);
}

export interface GetServiceAccountTokenArgs {
    /**
     * Slug of the API token
     */
    apiToken: string;
    /**
     * Slug of the service account
     */
    serviceAccount: string;
}

export interface GetServiceAccountTokenResult {
    readonly items: outputs.workplace.v3.GetServiceAccountTokenProperties;
}
export function getServiceAccountTokenOutput(args: GetServiceAccountTokenOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceAccountTokenResult> {
    return pulumi.output(args).apply((a: any) => getServiceAccountToken(a, opts))
}

export interface GetServiceAccountTokenOutputArgs {
    /**
     * Slug of the API token
     */
    apiToken: pulumi.Input<string>;
    /**
     * Slug of the service account
     */
    serviceAccount: pulumi.Input<string>;
}
