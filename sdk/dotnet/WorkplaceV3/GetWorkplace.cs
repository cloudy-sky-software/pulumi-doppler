// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DopplerNative.WorkplaceV3
{
    public static class GetWorkplace
    {
        public static Task<GetWorkplaceResult> InvokeAsync(GetWorkplaceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkplaceResult>("doppler-native:workplace/v3:getWorkplace", args ?? new GetWorkplaceArgs(), options.WithDefaults());

        public static Output<GetWorkplaceResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkplaceResult>("doppler-native:workplace/v3:getWorkplace", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class GetWorkplaceArgs : global::Pulumi.InvokeArgs
    {
        public GetWorkplaceArgs()
        {
        }
        public static new GetWorkplaceArgs Empty => new GetWorkplaceArgs();
    }


    [OutputType]
    public sealed class GetWorkplaceResult
    {
        public readonly Outputs.GetWorkplaceProperties Items;

        [OutputConstructor]
        private GetWorkplaceResult(Outputs.GetWorkplaceProperties items)
        {
            Items = items;
        }
    }
}
