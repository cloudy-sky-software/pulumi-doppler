// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DopplerNative.WorkplaceV3
{
    public static class GetServiceAccountToken
    {
        public static Task<GetServiceAccountTokenResult> InvokeAsync(GetServiceAccountTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceAccountTokenResult>("doppler-native:workplace/v3:getServiceAccountToken", args ?? new GetServiceAccountTokenArgs(), options.WithDefaults());

        public static Output<GetServiceAccountTokenResult> Invoke(GetServiceAccountTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceAccountTokenResult>("doppler-native:workplace/v3:getServiceAccountToken", args ?? new GetServiceAccountTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceAccountTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Slug of the API token
        /// </summary>
        [Input("apiToken", required: true)]
        public string ApiToken { get; set; } = null!;

        /// <summary>
        /// Slug of the service account
        /// </summary>
        [Input("serviceAccount", required: true)]
        public string ServiceAccount { get; set; } = null!;

        public GetServiceAccountTokenArgs()
        {
        }
        public static new GetServiceAccountTokenArgs Empty => new GetServiceAccountTokenArgs();
    }

    public sealed class GetServiceAccountTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Slug of the API token
        /// </summary>
        [Input("apiToken", required: true)]
        public Input<string> ApiToken { get; set; } = null!;

        /// <summary>
        /// Slug of the service account
        /// </summary>
        [Input("serviceAccount", required: true)]
        public Input<string> ServiceAccount { get; set; } = null!;

        public GetServiceAccountTokenInvokeArgs()
        {
        }
        public static new GetServiceAccountTokenInvokeArgs Empty => new GetServiceAccountTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceAccountTokenResult
    {
        public readonly Outputs.GetServiceAccountTokenProperties Items;

        [OutputConstructor]
        private GetServiceAccountTokenResult(Outputs.GetServiceAccountTokenProperties items)
        {
            Items = items;
        }
    }
}
