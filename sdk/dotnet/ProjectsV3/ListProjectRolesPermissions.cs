// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DopplerNative.ProjectsV3
{
    public static class ListProjectRolesPermissions
    {
        public static Task<ListProjectRolesPermissionsResult> InvokeAsync(ListProjectRolesPermissionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListProjectRolesPermissionsResult>("doppler-native:projects/v3:listProjectRolesPermissions", args ?? new ListProjectRolesPermissionsArgs(), options.WithDefaults());

        public static Output<ListProjectRolesPermissionsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListProjectRolesPermissionsResult>("doppler-native:projects/v3:listProjectRolesPermissions", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class ListProjectRolesPermissionsArgs : global::Pulumi.InvokeArgs
    {
        public ListProjectRolesPermissionsArgs()
        {
        }
        public static new ListProjectRolesPermissionsArgs Empty => new ListProjectRolesPermissionsArgs();
    }


    [OutputType]
    public sealed class ListProjectRolesPermissionsResult
    {
        public readonly Outputs.ListProjectRolesPermissionsProperties Items;

        [OutputConstructor]
        private ListProjectRolesPermissionsResult(Outputs.ListProjectRolesPermissionsProperties items)
        {
            Items = items;
        }
    }
}
