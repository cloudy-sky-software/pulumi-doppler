// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Projects struct {
	pulumi.CustomResourceState

	// Description of project
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of project
	Name    pulumi.StringOutput        `pulumi:"name"`
	Project ProjectPropertiesPtrOutput `pulumi:"project"`
}

// NewProjects registers a new resource with the given unique name, arguments, and options.
func NewProjects(ctx *pulumi.Context,
	name string, args *ProjectsArgs, opts ...pulumi.ResourceOption) (*Projects, error) {
	if args == nil {
		args = &ProjectsArgs{}
	}

	if args.Description == nil {
		args.Description = pulumi.StringPtr("PROJECT_DESCRIPTION")
	}
	if args.Name == nil {
		args.Name = pulumi.StringPtr("PROJECT_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Projects
	err := ctx.RegisterResource("doppler-native:projects/v3:Projects", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjects gets an existing Projects resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjects(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectsState, opts ...pulumi.ResourceOption) (*Projects, error) {
	var resource Projects
	err := ctx.ReadResource("doppler-native:projects/v3:Projects", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Projects resources.
type projectsState struct {
}

type ProjectsState struct {
}

func (ProjectsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectsState)(nil)).Elem()
}

type projectsArgs struct {
	// Description of project
	Description *string `pulumi:"description"`
	// Name of project
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Projects resource.
type ProjectsArgs struct {
	// Description of project
	Description pulumi.StringPtrInput
	// Name of project
	Name pulumi.StringPtrInput
}

func (ProjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectsArgs)(nil)).Elem()
}

type ProjectsInput interface {
	pulumi.Input

	ToProjectsOutput() ProjectsOutput
	ToProjectsOutputWithContext(ctx context.Context) ProjectsOutput
}

func (*Projects) ElementType() reflect.Type {
	return reflect.TypeOf((**Projects)(nil)).Elem()
}

func (i *Projects) ToProjectsOutput() ProjectsOutput {
	return i.ToProjectsOutputWithContext(context.Background())
}

func (i *Projects) ToProjectsOutputWithContext(ctx context.Context) ProjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectsOutput)
}

type ProjectsOutput struct{ *pulumi.OutputState }

func (ProjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Projects)(nil)).Elem()
}

func (o ProjectsOutput) ToProjectsOutput() ProjectsOutput {
	return o
}

func (o ProjectsOutput) ToProjectsOutputWithContext(ctx context.Context) ProjectsOutput {
	return o
}

// Description of project
func (o ProjectsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Projects) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of project
func (o ProjectsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Projects) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProjectsOutput) Project() ProjectPropertiesPtrOutput {
	return o.ApplyT(func(v *Projects) ProjectPropertiesPtrOutput { return v.Project }).(ProjectPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectsInput)(nil)).Elem(), &Projects{})
	pulumi.RegisterOutputType(ProjectsOutput{})
}
