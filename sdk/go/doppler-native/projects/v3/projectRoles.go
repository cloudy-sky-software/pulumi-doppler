// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectRoles struct {
	pulumi.CustomResourceState

	// The name of the role
	Name pulumi.StringOutput `pulumi:"name"`
	// An array containing the permissions the role has. Valid permissions are: `enclave_config_logs`, `enclave_project_config_secrets_read`, `enclave_project_config_dynamic_secrets_read`, `enclave_project_config_dynamic_secrets_leases_write`, `enclave_project_config_rotated_secrets_read`, `enclave_config_syncs_manage`, `enclave_project_secrets_notes_manage`, `enclave_project_config_create`, `enclave_project_config_duplicate`, `enclave_project_config_secrets_write`, `enclave_project_config_service_tokens`, `enclave_project_config_trusted_ips`, `enclave_project_config_logs_rollback`, `enclave_project_config_list_all`, `enclave_project_pull_request_create`, `enclave_project_pull_request_respond`, `enclave_project_pull_request_view`, `enclave_secret_reminders`, `enclave_config_access_logs`, `enclave_project_members`, `enclave_project_rename`, `enclave_project_delete`, `enclave_project_webhooks`, `enclave_project_config_dynamic_secrets_manage`, `enclave_project_config_rotated_secrets_manage`, `enclave_project_config_rename`, `enclave_project_config_lock`, `enclave_project_config_delete`, `enclave_project_environment_list_all`, `enclave_project_environment_all`, `enclave_project_environment_order`, `enclave_project_environment_create`, `enclave_project_environment_delete`, `enclave_project_environment_rename`, `enclave_project_environment_settings_manage`, `enclave_project_secrets_referencing`, `enclave_config_secrets_referencing`
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	Role        RolePropertiesPtrOutput  `pulumi:"role"`
}

// NewProjectRoles registers a new resource with the given unique name, arguments, and options.
func NewProjectRoles(ctx *pulumi.Context,
	name string, args *ProjectRolesArgs, opts ...pulumi.ResourceOption) (*ProjectRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectRoles
	err := ctx.RegisterResource("doppler-native:projects/v3:ProjectRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectRoles gets an existing ProjectRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectRolesState, opts ...pulumi.ResourceOption) (*ProjectRoles, error) {
	var resource ProjectRoles
	err := ctx.ReadResource("doppler-native:projects/v3:ProjectRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectRoles resources.
type projectRolesState struct {
}

type ProjectRolesState struct {
}

func (ProjectRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRolesState)(nil)).Elem()
}

type projectRolesArgs struct {
	// The name of the role
	Name *string `pulumi:"name"`
	// An array containing the permissions the role has. Valid permissions are: `enclave_config_logs`, `enclave_project_config_secrets_read`, `enclave_project_config_dynamic_secrets_read`, `enclave_project_config_dynamic_secrets_leases_write`, `enclave_project_config_rotated_secrets_read`, `enclave_config_syncs_manage`, `enclave_project_secrets_notes_manage`, `enclave_project_config_create`, `enclave_project_config_duplicate`, `enclave_project_config_secrets_write`, `enclave_project_config_service_tokens`, `enclave_project_config_trusted_ips`, `enclave_project_config_logs_rollback`, `enclave_project_config_list_all`, `enclave_project_pull_request_create`, `enclave_project_pull_request_respond`, `enclave_project_pull_request_view`, `enclave_secret_reminders`, `enclave_config_access_logs`, `enclave_project_members`, `enclave_project_rename`, `enclave_project_delete`, `enclave_project_webhooks`, `enclave_project_config_dynamic_secrets_manage`, `enclave_project_config_rotated_secrets_manage`, `enclave_project_config_rename`, `enclave_project_config_lock`, `enclave_project_config_delete`, `enclave_project_environment_list_all`, `enclave_project_environment_all`, `enclave_project_environment_order`, `enclave_project_environment_create`, `enclave_project_environment_delete`, `enclave_project_environment_rename`, `enclave_project_environment_settings_manage`, `enclave_project_secrets_referencing`, `enclave_config_secrets_referencing`
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a ProjectRoles resource.
type ProjectRolesArgs struct {
	// The name of the role
	Name pulumi.StringPtrInput
	// An array containing the permissions the role has. Valid permissions are: `enclave_config_logs`, `enclave_project_config_secrets_read`, `enclave_project_config_dynamic_secrets_read`, `enclave_project_config_dynamic_secrets_leases_write`, `enclave_project_config_rotated_secrets_read`, `enclave_config_syncs_manage`, `enclave_project_secrets_notes_manage`, `enclave_project_config_create`, `enclave_project_config_duplicate`, `enclave_project_config_secrets_write`, `enclave_project_config_service_tokens`, `enclave_project_config_trusted_ips`, `enclave_project_config_logs_rollback`, `enclave_project_config_list_all`, `enclave_project_pull_request_create`, `enclave_project_pull_request_respond`, `enclave_project_pull_request_view`, `enclave_secret_reminders`, `enclave_config_access_logs`, `enclave_project_members`, `enclave_project_rename`, `enclave_project_delete`, `enclave_project_webhooks`, `enclave_project_config_dynamic_secrets_manage`, `enclave_project_config_rotated_secrets_manage`, `enclave_project_config_rename`, `enclave_project_config_lock`, `enclave_project_config_delete`, `enclave_project_environment_list_all`, `enclave_project_environment_all`, `enclave_project_environment_order`, `enclave_project_environment_create`, `enclave_project_environment_delete`, `enclave_project_environment_rename`, `enclave_project_environment_settings_manage`, `enclave_project_secrets_referencing`, `enclave_config_secrets_referencing`
	Permissions pulumi.StringArrayInput
}

func (ProjectRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRolesArgs)(nil)).Elem()
}

type ProjectRolesInput interface {
	pulumi.Input

	ToProjectRolesOutput() ProjectRolesOutput
	ToProjectRolesOutputWithContext(ctx context.Context) ProjectRolesOutput
}

func (*ProjectRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRoles)(nil)).Elem()
}

func (i *ProjectRoles) ToProjectRolesOutput() ProjectRolesOutput {
	return i.ToProjectRolesOutputWithContext(context.Background())
}

func (i *ProjectRoles) ToProjectRolesOutputWithContext(ctx context.Context) ProjectRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRolesOutput)
}

type ProjectRolesOutput struct{ *pulumi.OutputState }

func (ProjectRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRoles)(nil)).Elem()
}

func (o ProjectRolesOutput) ToProjectRolesOutput() ProjectRolesOutput {
	return o
}

func (o ProjectRolesOutput) ToProjectRolesOutputWithContext(ctx context.Context) ProjectRolesOutput {
	return o
}

// The name of the role
func (o ProjectRolesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRoles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array containing the permissions the role has. Valid permissions are: `enclave_config_logs`, `enclave_project_config_secrets_read`, `enclave_project_config_dynamic_secrets_read`, `enclave_project_config_dynamic_secrets_leases_write`, `enclave_project_config_rotated_secrets_read`, `enclave_config_syncs_manage`, `enclave_project_secrets_notes_manage`, `enclave_project_config_create`, `enclave_project_config_duplicate`, `enclave_project_config_secrets_write`, `enclave_project_config_service_tokens`, `enclave_project_config_trusted_ips`, `enclave_project_config_logs_rollback`, `enclave_project_config_list_all`, `enclave_project_pull_request_create`, `enclave_project_pull_request_respond`, `enclave_project_pull_request_view`, `enclave_secret_reminders`, `enclave_config_access_logs`, `enclave_project_members`, `enclave_project_rename`, `enclave_project_delete`, `enclave_project_webhooks`, `enclave_project_config_dynamic_secrets_manage`, `enclave_project_config_rotated_secrets_manage`, `enclave_project_config_rename`, `enclave_project_config_lock`, `enclave_project_config_delete`, `enclave_project_environment_list_all`, `enclave_project_environment_all`, `enclave_project_environment_order`, `enclave_project_environment_create`, `enclave_project_environment_delete`, `enclave_project_environment_rename`, `enclave_project_environment_settings_manage`, `enclave_project_secrets_referencing`, `enclave_config_secrets_referencing`
func (o ProjectRolesOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectRoles) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

func (o ProjectRolesOutput) Role() RolePropertiesPtrOutput {
	return o.ApplyT(func(v *ProjectRoles) RolePropertiesPtrOutput { return v.Role }).(RolePropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRolesInput)(nil)).Elem(), &ProjectRoles{})
	pulumi.RegisterOutputType(ProjectRolesOutput{})
}
