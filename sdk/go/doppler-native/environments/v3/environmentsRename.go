// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnvironmentsRename struct {
	pulumi.CustomResourceState

	// Desired name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Desired slug
	Slug pulumi.StringPtrOutput `pulumi:"slug"`
}

// NewEnvironmentsRename registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentsRename(ctx *pulumi.Context,
	name string, args *EnvironmentsRenameArgs, opts ...pulumi.ResourceOption) (*EnvironmentsRename, error) {
	if args == nil {
		args = &EnvironmentsRenameArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentsRename
	err := ctx.RegisterResource("doppler-native:environments/v3:EnvironmentsRename", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentsRename gets an existing EnvironmentsRename resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentsRename(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentsRenameState, opts ...pulumi.ResourceOption) (*EnvironmentsRename, error) {
	var resource EnvironmentsRename
	err := ctx.ReadResource("doppler-native:environments/v3:EnvironmentsRename", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentsRename resources.
type environmentsRenameState struct {
}

type EnvironmentsRenameState struct {
}

func (EnvironmentsRenameState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentsRenameState)(nil)).Elem()
}

type environmentsRenameArgs struct {
	// Desired name
	Name *string `pulumi:"name"`
	// Desired slug
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a EnvironmentsRename resource.
type EnvironmentsRenameArgs struct {
	// Desired name
	Name pulumi.StringPtrInput
	// Desired slug
	Slug pulumi.StringPtrInput
}

func (EnvironmentsRenameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentsRenameArgs)(nil)).Elem()
}

type EnvironmentsRenameInput interface {
	pulumi.Input

	ToEnvironmentsRenameOutput() EnvironmentsRenameOutput
	ToEnvironmentsRenameOutputWithContext(ctx context.Context) EnvironmentsRenameOutput
}

func (*EnvironmentsRename) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentsRename)(nil)).Elem()
}

func (i *EnvironmentsRename) ToEnvironmentsRenameOutput() EnvironmentsRenameOutput {
	return i.ToEnvironmentsRenameOutputWithContext(context.Background())
}

func (i *EnvironmentsRename) ToEnvironmentsRenameOutputWithContext(ctx context.Context) EnvironmentsRenameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentsRenameOutput)
}

type EnvironmentsRenameOutput struct{ *pulumi.OutputState }

func (EnvironmentsRenameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentsRename)(nil)).Elem()
}

func (o EnvironmentsRenameOutput) ToEnvironmentsRenameOutput() EnvironmentsRenameOutput {
	return o
}

func (o EnvironmentsRenameOutput) ToEnvironmentsRenameOutputWithContext(ctx context.Context) EnvironmentsRenameOutput {
	return o
}

// Desired name
func (o EnvironmentsRenameOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentsRename) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Desired slug
func (o EnvironmentsRenameOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentsRename) pulumi.StringPtrOutput { return v.Slug }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentsRenameInput)(nil)).Elem(), &EnvironmentsRename{})
	pulumi.RegisterOutputType(EnvironmentsRenameOutput{})
}
