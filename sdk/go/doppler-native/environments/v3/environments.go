// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Environments struct {
	pulumi.CustomResourceState

	Environment EnvironmentPropertiesPtrOutput `pulumi:"environment"`
	Name        pulumi.StringOutput            `pulumi:"name"`
	Slug        pulumi.StringOutput            `pulumi:"slug"`
}

// NewEnvironments registers a new resource with the given unique name, arguments, and options.
func NewEnvironments(ctx *pulumi.Context,
	name string, args *EnvironmentsArgs, opts ...pulumi.ResourceOption) (*Environments, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environments
	err := ctx.RegisterResource("doppler-native:environments/v3:Environments", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironments gets an existing Environments resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironments(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentsState, opts ...pulumi.ResourceOption) (*Environments, error) {
	var resource Environments
	err := ctx.ReadResource("doppler-native:environments/v3:Environments", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environments resources.
type environmentsState struct {
}

type EnvironmentsState struct {
}

func (EnvironmentsState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentsState)(nil)).Elem()
}

type environmentsArgs struct {
	Name *string `pulumi:"name"`
	Slug string  `pulumi:"slug"`
}

// The set of arguments for constructing a Environments resource.
type EnvironmentsArgs struct {
	Name pulumi.StringPtrInput
	Slug pulumi.StringInput
}

func (EnvironmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentsArgs)(nil)).Elem()
}

type EnvironmentsInput interface {
	pulumi.Input

	ToEnvironmentsOutput() EnvironmentsOutput
	ToEnvironmentsOutputWithContext(ctx context.Context) EnvironmentsOutput
}

func (*Environments) ElementType() reflect.Type {
	return reflect.TypeOf((**Environments)(nil)).Elem()
}

func (i *Environments) ToEnvironmentsOutput() EnvironmentsOutput {
	return i.ToEnvironmentsOutputWithContext(context.Background())
}

func (i *Environments) ToEnvironmentsOutputWithContext(ctx context.Context) EnvironmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentsOutput)
}

type EnvironmentsOutput struct{ *pulumi.OutputState }

func (EnvironmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environments)(nil)).Elem()
}

func (o EnvironmentsOutput) ToEnvironmentsOutput() EnvironmentsOutput {
	return o
}

func (o EnvironmentsOutput) ToEnvironmentsOutputWithContext(ctx context.Context) EnvironmentsOutput {
	return o
}

func (o EnvironmentsOutput) Environment() EnvironmentPropertiesPtrOutput {
	return o.ApplyT(func(v *Environments) EnvironmentPropertiesPtrOutput { return v.Environment }).(EnvironmentPropertiesPtrOutput)
}

func (o EnvironmentsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Environments) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentsOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Environments) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentsInput)(nil)).Elem(), &Environments{})
	pulumi.RegisterOutputType(EnvironmentsOutput{})
}
