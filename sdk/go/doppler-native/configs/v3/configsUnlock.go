// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigsUnlock struct {
	pulumi.CustomResourceState

	Config ConfigPropertiesOutput `pulumi:"config"`
	// Unique identifier for the project object.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewConfigsUnlock registers a new resource with the given unique name, arguments, and options.
func NewConfigsUnlock(ctx *pulumi.Context,
	name string, args *ConfigsUnlockArgs, opts ...pulumi.ResourceOption) (*ConfigsUnlock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		args.Config = pulumi.String("CONFIG_NAME")
	}
	if args.Project == nil {
		args.Project = pulumi.String("PROJECT_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigsUnlock
	err := ctx.RegisterResource("doppler-native:configs/v3:ConfigsUnlock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigsUnlock gets an existing ConfigsUnlock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigsUnlock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigsUnlockState, opts ...pulumi.ResourceOption) (*ConfigsUnlock, error) {
	var resource ConfigsUnlock
	err := ctx.ReadResource("doppler-native:configs/v3:ConfigsUnlock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigsUnlock resources.
type configsUnlockState struct {
}

type ConfigsUnlockState struct {
}

func (ConfigsUnlockState) ElementType() reflect.Type {
	return reflect.TypeOf((*configsUnlockState)(nil)).Elem()
}

type configsUnlockArgs struct {
	// Name of the config.
	Config string `pulumi:"config"`
	// Unique identifier for the project object.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ConfigsUnlock resource.
type ConfigsUnlockArgs struct {
	// Name of the config.
	Config pulumi.StringInput
	// Unique identifier for the project object.
	Project pulumi.StringInput
}

func (ConfigsUnlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configsUnlockArgs)(nil)).Elem()
}

type ConfigsUnlockInput interface {
	pulumi.Input

	ToConfigsUnlockOutput() ConfigsUnlockOutput
	ToConfigsUnlockOutputWithContext(ctx context.Context) ConfigsUnlockOutput
}

func (*ConfigsUnlock) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsUnlock)(nil)).Elem()
}

func (i *ConfigsUnlock) ToConfigsUnlockOutput() ConfigsUnlockOutput {
	return i.ToConfigsUnlockOutputWithContext(context.Background())
}

func (i *ConfigsUnlock) ToConfigsUnlockOutputWithContext(ctx context.Context) ConfigsUnlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigsUnlockOutput)
}

type ConfigsUnlockOutput struct{ *pulumi.OutputState }

func (ConfigsUnlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsUnlock)(nil)).Elem()
}

func (o ConfigsUnlockOutput) ToConfigsUnlockOutput() ConfigsUnlockOutput {
	return o
}

func (o ConfigsUnlockOutput) ToConfigsUnlockOutputWithContext(ctx context.Context) ConfigsUnlockOutput {
	return o
}

func (o ConfigsUnlockOutput) Config() ConfigPropertiesOutput {
	return o.ApplyT(func(v *ConfigsUnlock) ConfigPropertiesOutput { return v.Config }).(ConfigPropertiesOutput)
}

// Unique identifier for the project object.
func (o ConfigsUnlockOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigsUnlock) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigsUnlockInput)(nil)).Elem(), &ConfigsUnlock{})
	pulumi.RegisterOutputType(ConfigsUnlockOutput{})
}
