// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecretsUpdateNote struct {
	pulumi.CustomResourceState

	// Deprecated: Config is no longer required as notes have always been set at the project level.
	Config pulumi.StringPtrOutput `pulumi:"config"`
	Note   pulumi.StringOutput    `pulumi:"note"`
	// Unique identifier for the project object.
	Project pulumi.StringOutput `pulumi:"project"`
	Secret  pulumi.StringOutput `pulumi:"secret"`
}

// NewSecretsUpdateNote registers a new resource with the given unique name, arguments, and options.
func NewSecretsUpdateNote(ctx *pulumi.Context,
	name string, args *SecretsUpdateNoteArgs, opts ...pulumi.ResourceOption) (*SecretsUpdateNote, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Note == nil {
		args.Note = pulumi.String("YOUR_NOTE")
	}
	if args.Project == nil {
		args.Project = pulumi.String("PROJECT_NAME")
	}
	if args.Secret == nil {
		args.Secret = pulumi.String("SECRET_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretsUpdateNote
	err := ctx.RegisterResource("doppler-native:configs/v3:SecretsUpdateNote", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretsUpdateNote gets an existing SecretsUpdateNote resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretsUpdateNote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretsUpdateNoteState, opts ...pulumi.ResourceOption) (*SecretsUpdateNote, error) {
	var resource SecretsUpdateNote
	err := ctx.ReadResource("doppler-native:configs/v3:SecretsUpdateNote", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretsUpdateNote resources.
type secretsUpdateNoteState struct {
}

type SecretsUpdateNoteState struct {
}

func (SecretsUpdateNoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsUpdateNoteState)(nil)).Elem()
}

type secretsUpdateNoteArgs struct {
	// Deprecated: Config is no longer required as notes have always been set at the project level.
	Config *string `pulumi:"config"`
	// The note you want to set on the secret. This note will be applied to the specified secret in all environments.
	Note string `pulumi:"note"`
	// Unique identifier for the project object.
	Project string `pulumi:"project"`
	// The name of the secret
	Secret string `pulumi:"secret"`
}

// The set of arguments for constructing a SecretsUpdateNote resource.
type SecretsUpdateNoteArgs struct {
	// Deprecated: Config is no longer required as notes have always been set at the project level.
	Config pulumi.StringPtrInput
	// The note you want to set on the secret. This note will be applied to the specified secret in all environments.
	Note pulumi.StringInput
	// Unique identifier for the project object.
	Project pulumi.StringInput
	// The name of the secret
	Secret pulumi.StringInput
}

func (SecretsUpdateNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsUpdateNoteArgs)(nil)).Elem()
}

type SecretsUpdateNoteInput interface {
	pulumi.Input

	ToSecretsUpdateNoteOutput() SecretsUpdateNoteOutput
	ToSecretsUpdateNoteOutputWithContext(ctx context.Context) SecretsUpdateNoteOutput
}

func (*SecretsUpdateNote) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsUpdateNote)(nil)).Elem()
}

func (i *SecretsUpdateNote) ToSecretsUpdateNoteOutput() SecretsUpdateNoteOutput {
	return i.ToSecretsUpdateNoteOutputWithContext(context.Background())
}

func (i *SecretsUpdateNote) ToSecretsUpdateNoteOutputWithContext(ctx context.Context) SecretsUpdateNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsUpdateNoteOutput)
}

type SecretsUpdateNoteOutput struct{ *pulumi.OutputState }

func (SecretsUpdateNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsUpdateNote)(nil)).Elem()
}

func (o SecretsUpdateNoteOutput) ToSecretsUpdateNoteOutput() SecretsUpdateNoteOutput {
	return o
}

func (o SecretsUpdateNoteOutput) ToSecretsUpdateNoteOutputWithContext(ctx context.Context) SecretsUpdateNoteOutput {
	return o
}

// Deprecated: Config is no longer required as notes have always been set at the project level.
func (o SecretsUpdateNoteOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsUpdateNote) pulumi.StringPtrOutput { return v.Config }).(pulumi.StringPtrOutput)
}

func (o SecretsUpdateNoteOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsUpdateNote) pulumi.StringOutput { return v.Note }).(pulumi.StringOutput)
}

// Unique identifier for the project object.
func (o SecretsUpdateNoteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsUpdateNote) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SecretsUpdateNoteOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsUpdateNote) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsUpdateNoteInput)(nil)).Elem(), &SecretsUpdateNote{})
	pulumi.RegisterOutputType(SecretsUpdateNoteOutput{})
}
