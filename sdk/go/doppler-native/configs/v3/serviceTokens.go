// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceTokens struct {
	pulumi.CustomResourceState

	// Token's capabilities.
	Access ServiceTokensAccessPtrOutput `pulumi:"access"`
	// Name of the config object.
	Config pulumi.StringOutput `pulumi:"config"`
	// Unix timestamp of when token should expire.
	ExpireAt pulumi.StringPtrOutput `pulumi:"expireAt"`
	// Name of the service token.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier for the project object.
	Project pulumi.StringOutput      `pulumi:"project"`
	Token   TokenPropertiesPtrOutput `pulumi:"token"`
}

// NewServiceTokens registers a new resource with the given unique name, arguments, and options.
func NewServiceTokens(ctx *pulumi.Context,
	name string, args *ServiceTokensArgs, opts ...pulumi.ResourceOption) (*ServiceTokens, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Access == nil {
		args.Access = ServiceTokensAccess("read")
	}
	if args.Config == nil {
		args.Config = pulumi.String("CONFIG_NAME")
	}
	if args.Name == nil {
		args.Name = pulumi.StringPtr("TOKEN_NAME")
	}
	if args.Project == nil {
		args.Project = pulumi.String("PROJECT_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceTokens
	err := ctx.RegisterResource("doppler-native:configs/v3:ServiceTokens", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceTokens gets an existing ServiceTokens resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceTokens(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceTokensState, opts ...pulumi.ResourceOption) (*ServiceTokens, error) {
	var resource ServiceTokens
	err := ctx.ReadResource("doppler-native:configs/v3:ServiceTokens", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceTokens resources.
type serviceTokensState struct {
}

type ServiceTokensState struct {
}

func (ServiceTokensState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceTokensState)(nil)).Elem()
}

type serviceTokensArgs struct {
	// Token's capabilities.
	Access *ServiceTokensAccess `pulumi:"access"`
	// Name of the config object.
	Config string `pulumi:"config"`
	// Unix timestamp of when token should expire.
	ExpireAt *string `pulumi:"expireAt"`
	// Name of the service token.
	Name *string `pulumi:"name"`
	// Unique identifier for the project object.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ServiceTokens resource.
type ServiceTokensArgs struct {
	// Token's capabilities.
	Access ServiceTokensAccessPtrInput
	// Name of the config object.
	Config pulumi.StringInput
	// Unix timestamp of when token should expire.
	ExpireAt pulumi.StringPtrInput
	// Name of the service token.
	Name pulumi.StringPtrInput
	// Unique identifier for the project object.
	Project pulumi.StringInput
}

func (ServiceTokensArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceTokensArgs)(nil)).Elem()
}

type ServiceTokensInput interface {
	pulumi.Input

	ToServiceTokensOutput() ServiceTokensOutput
	ToServiceTokensOutputWithContext(ctx context.Context) ServiceTokensOutput
}

func (*ServiceTokens) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTokens)(nil)).Elem()
}

func (i *ServiceTokens) ToServiceTokensOutput() ServiceTokensOutput {
	return i.ToServiceTokensOutputWithContext(context.Background())
}

func (i *ServiceTokens) ToServiceTokensOutputWithContext(ctx context.Context) ServiceTokensOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTokensOutput)
}

type ServiceTokensOutput struct{ *pulumi.OutputState }

func (ServiceTokensOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTokens)(nil)).Elem()
}

func (o ServiceTokensOutput) ToServiceTokensOutput() ServiceTokensOutput {
	return o
}

func (o ServiceTokensOutput) ToServiceTokensOutputWithContext(ctx context.Context) ServiceTokensOutput {
	return o
}

// Token's capabilities.
func (o ServiceTokensOutput) Access() ServiceTokensAccessPtrOutput {
	return o.ApplyT(func(v *ServiceTokens) ServiceTokensAccessPtrOutput { return v.Access }).(ServiceTokensAccessPtrOutput)
}

// Name of the config object.
func (o ServiceTokensOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceTokens) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// Unix timestamp of when token should expire.
func (o ServiceTokensOutput) ExpireAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTokens) pulumi.StringPtrOutput { return v.ExpireAt }).(pulumi.StringPtrOutput)
}

// Name of the service token.
func (o ServiceTokensOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceTokens) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier for the project object.
func (o ServiceTokensOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceTokens) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ServiceTokensOutput) Token() TokenPropertiesPtrOutput {
	return o.ApplyT(func(v *ServiceTokens) TokenPropertiesPtrOutput { return v.Token }).(TokenPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTokensInput)(nil)).Elem(), &ServiceTokens{})
	pulumi.RegisterOutputType(ServiceTokensOutput{})
}
