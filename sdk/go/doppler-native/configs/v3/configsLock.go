// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigsLock struct {
	pulumi.CustomResourceState

	Config ConfigPropertiesOutput `pulumi:"config"`
	// Unique identifier for the project object.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewConfigsLock registers a new resource with the given unique name, arguments, and options.
func NewConfigsLock(ctx *pulumi.Context,
	name string, args *ConfigsLockArgs, opts ...pulumi.ResourceOption) (*ConfigsLock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		args.Config = pulumi.String("CONFIG_NAME")
	}
	if args.Project == nil {
		args.Project = pulumi.String("PROJECT_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigsLock
	err := ctx.RegisterResource("doppler-native:configs/v3:ConfigsLock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigsLock gets an existing ConfigsLock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigsLock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigsLockState, opts ...pulumi.ResourceOption) (*ConfigsLock, error) {
	var resource ConfigsLock
	err := ctx.ReadResource("doppler-native:configs/v3:ConfigsLock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigsLock resources.
type configsLockState struct {
}

type ConfigsLockState struct {
}

func (ConfigsLockState) ElementType() reflect.Type {
	return reflect.TypeOf((*configsLockState)(nil)).Elem()
}

type configsLockArgs struct {
	// Name of the config.
	Config string `pulumi:"config"`
	// Unique identifier for the project object.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ConfigsLock resource.
type ConfigsLockArgs struct {
	// Name of the config.
	Config pulumi.StringInput
	// Unique identifier for the project object.
	Project pulumi.StringInput
}

func (ConfigsLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configsLockArgs)(nil)).Elem()
}

type ConfigsLockInput interface {
	pulumi.Input

	ToConfigsLockOutput() ConfigsLockOutput
	ToConfigsLockOutputWithContext(ctx context.Context) ConfigsLockOutput
}

func (*ConfigsLock) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsLock)(nil)).Elem()
}

func (i *ConfigsLock) ToConfigsLockOutput() ConfigsLockOutput {
	return i.ToConfigsLockOutputWithContext(context.Background())
}

func (i *ConfigsLock) ToConfigsLockOutputWithContext(ctx context.Context) ConfigsLockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigsLockOutput)
}

type ConfigsLockOutput struct{ *pulumi.OutputState }

func (ConfigsLockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsLock)(nil)).Elem()
}

func (o ConfigsLockOutput) ToConfigsLockOutput() ConfigsLockOutput {
	return o
}

func (o ConfigsLockOutput) ToConfigsLockOutputWithContext(ctx context.Context) ConfigsLockOutput {
	return o
}

func (o ConfigsLockOutput) Config() ConfigPropertiesOutput {
	return o.ApplyT(func(v *ConfigsLock) ConfigPropertiesOutput { return v.Config }).(ConfigPropertiesOutput)
}

// Unique identifier for the project object.
func (o ConfigsLockOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigsLock) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigsLockInput)(nil)).Elem(), &ConfigsLock{})
	pulumi.RegisterOutputType(ConfigsLockOutput{})
}
