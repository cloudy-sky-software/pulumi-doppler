// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecretsUpdate struct {
	pulumi.CustomResourceState

	// Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
	ChangeRequests ChangeRequestsItemPropertiesArrayOutput `pulumi:"changeRequests"`
	// Name of the config object.
	Config pulumi.StringOutput `pulumi:"config"`
	// Unique identifier for the project object.
	Project pulumi.StringOutput        `pulumi:"project"`
	Secrets SecretsPropertiesPtrOutput `pulumi:"secrets"`
}

// NewSecretsUpdate registers a new resource with the given unique name, arguments, and options.
func NewSecretsUpdate(ctx *pulumi.Context,
	name string, args *SecretsUpdateArgs, opts ...pulumi.ResourceOption) (*SecretsUpdate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		args.Config = pulumi.String("CONFIG_NAME")
	}
	if args.Project == nil {
		args.Project = pulumi.String("PROJECT_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretsUpdate
	err := ctx.RegisterResource("doppler-native:configs/v3:SecretsUpdate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretsUpdate gets an existing SecretsUpdate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretsUpdate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretsUpdateState, opts ...pulumi.ResourceOption) (*SecretsUpdate, error) {
	var resource SecretsUpdate
	err := ctx.ReadResource("doppler-native:configs/v3:SecretsUpdate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretsUpdate resources.
type secretsUpdateState struct {
}

type SecretsUpdateState struct {
}

func (SecretsUpdateState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsUpdateState)(nil)).Elem()
}

type secretsUpdateArgs struct {
	// Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
	ChangeRequests []ChangeRequestsItemProperties `pulumi:"changeRequests"`
	// Name of the config object.
	Config string `pulumi:"config"`
	// Unique identifier for the project object.
	Project string `pulumi:"project"`
	// Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
	Secrets *SecretsProperties `pulumi:"secrets"`
}

// The set of arguments for constructing a SecretsUpdate resource.
type SecretsUpdateArgs struct {
	// Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
	ChangeRequests ChangeRequestsItemPropertiesArrayInput
	// Name of the config object.
	Config pulumi.StringInput
	// Unique identifier for the project object.
	Project pulumi.StringInput
	// Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
	Secrets SecretsPropertiesPtrInput
}

func (SecretsUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsUpdateArgs)(nil)).Elem()
}

type SecretsUpdateInput interface {
	pulumi.Input

	ToSecretsUpdateOutput() SecretsUpdateOutput
	ToSecretsUpdateOutputWithContext(ctx context.Context) SecretsUpdateOutput
}

func (*SecretsUpdate) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsUpdate)(nil)).Elem()
}

func (i *SecretsUpdate) ToSecretsUpdateOutput() SecretsUpdateOutput {
	return i.ToSecretsUpdateOutputWithContext(context.Background())
}

func (i *SecretsUpdate) ToSecretsUpdateOutputWithContext(ctx context.Context) SecretsUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsUpdateOutput)
}

type SecretsUpdateOutput struct{ *pulumi.OutputState }

func (SecretsUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsUpdate)(nil)).Elem()
}

func (o SecretsUpdateOutput) ToSecretsUpdateOutput() SecretsUpdateOutput {
	return o
}

func (o SecretsUpdateOutput) ToSecretsUpdateOutputWithContext(ctx context.Context) SecretsUpdateOutput {
	return o
}

// Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
func (o SecretsUpdateOutput) ChangeRequests() ChangeRequestsItemPropertiesArrayOutput {
	return o.ApplyT(func(v *SecretsUpdate) ChangeRequestsItemPropertiesArrayOutput { return v.ChangeRequests }).(ChangeRequestsItemPropertiesArrayOutput)
}

// Name of the config object.
func (o SecretsUpdateOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsUpdate) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// Unique identifier for the project object.
func (o SecretsUpdateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsUpdate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SecretsUpdateOutput) Secrets() SecretsPropertiesPtrOutput {
	return o.ApplyT(func(v *SecretsUpdate) SecretsPropertiesPtrOutput { return v.Secrets }).(SecretsPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsUpdateInput)(nil)).Elem(), &SecretsUpdate{})
	pulumi.RegisterOutputType(SecretsUpdateOutput{})
}
