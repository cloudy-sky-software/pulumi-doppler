// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigsUpdate struct {
	pulumi.CustomResourceState

	Config ConfigPropertiesOutput `pulumi:"config"`
	// The new name of config.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier for the project object.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewConfigsUpdate registers a new resource with the given unique name, arguments, and options.
func NewConfigsUpdate(ctx *pulumi.Context,
	name string, args *ConfigsUpdateArgs, opts ...pulumi.ResourceOption) (*ConfigsUpdate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		args.Config = pulumi.String("CONFIG_NAME")
	}
	if args.Name == nil {
		args.Name = pulumi.StringPtr("CONFIG_NEW_NAME")
	}
	if args.Project == nil {
		args.Project = pulumi.String("PROJECT_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigsUpdate
	err := ctx.RegisterResource("doppler-native:configs/v3:ConfigsUpdate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigsUpdate gets an existing ConfigsUpdate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigsUpdate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigsUpdateState, opts ...pulumi.ResourceOption) (*ConfigsUpdate, error) {
	var resource ConfigsUpdate
	err := ctx.ReadResource("doppler-native:configs/v3:ConfigsUpdate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigsUpdate resources.
type configsUpdateState struct {
}

type ConfigsUpdateState struct {
}

func (ConfigsUpdateState) ElementType() reflect.Type {
	return reflect.TypeOf((*configsUpdateState)(nil)).Elem()
}

type configsUpdateArgs struct {
	// Name of the config object.
	Config string `pulumi:"config"`
	// The new name of config.
	Name *string `pulumi:"name"`
	// Unique identifier for the project object.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ConfigsUpdate resource.
type ConfigsUpdateArgs struct {
	// Name of the config object.
	Config pulumi.StringInput
	// The new name of config.
	Name pulumi.StringPtrInput
	// Unique identifier for the project object.
	Project pulumi.StringInput
}

func (ConfigsUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configsUpdateArgs)(nil)).Elem()
}

type ConfigsUpdateInput interface {
	pulumi.Input

	ToConfigsUpdateOutput() ConfigsUpdateOutput
	ToConfigsUpdateOutputWithContext(ctx context.Context) ConfigsUpdateOutput
}

func (*ConfigsUpdate) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsUpdate)(nil)).Elem()
}

func (i *ConfigsUpdate) ToConfigsUpdateOutput() ConfigsUpdateOutput {
	return i.ToConfigsUpdateOutputWithContext(context.Background())
}

func (i *ConfigsUpdate) ToConfigsUpdateOutputWithContext(ctx context.Context) ConfigsUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigsUpdateOutput)
}

type ConfigsUpdateOutput struct{ *pulumi.OutputState }

func (ConfigsUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsUpdate)(nil)).Elem()
}

func (o ConfigsUpdateOutput) ToConfigsUpdateOutput() ConfigsUpdateOutput {
	return o
}

func (o ConfigsUpdateOutput) ToConfigsUpdateOutputWithContext(ctx context.Context) ConfigsUpdateOutput {
	return o
}

func (o ConfigsUpdateOutput) Config() ConfigPropertiesOutput {
	return o.ApplyT(func(v *ConfigsUpdate) ConfigPropertiesOutput { return v.Config }).(ConfigPropertiesOutput)
}

// The new name of config.
func (o ConfigsUpdateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigsUpdate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier for the project object.
func (o ConfigsUpdateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigsUpdate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigsUpdateInput)(nil)).Elem(), &ConfigsUpdate{})
	pulumi.RegisterOutputType(ConfigsUpdateOutput{})
}
