// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigsClone struct {
	pulumi.CustomResourceState

	Config ConfigPropertiesOutput `pulumi:"config"`
	// Name of the new branch config.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier for the project object.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewConfigsClone registers a new resource with the given unique name, arguments, and options.
func NewConfigsClone(ctx *pulumi.Context,
	name string, args *ConfigsCloneArgs, opts ...pulumi.ResourceOption) (*ConfigsClone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		args.Config = pulumi.String("CONFIG_NAME")
	}
	if args.Name == nil {
		args.Name = pulumi.StringPtr("NEW_CONFIG_NAME")
	}
	if args.Project == nil {
		args.Project = pulumi.String("PROJECT_NAME")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigsClone
	err := ctx.RegisterResource("doppler-native:configs/v3:ConfigsClone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigsClone gets an existing ConfigsClone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigsClone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigsCloneState, opts ...pulumi.ResourceOption) (*ConfigsClone, error) {
	var resource ConfigsClone
	err := ctx.ReadResource("doppler-native:configs/v3:ConfigsClone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigsClone resources.
type configsCloneState struct {
}

type ConfigsCloneState struct {
}

func (ConfigsCloneState) ElementType() reflect.Type {
	return reflect.TypeOf((*configsCloneState)(nil)).Elem()
}

type configsCloneArgs struct {
	// Name of the branch config being cloned.
	Config string `pulumi:"config"`
	// Name of the new branch config.
	Name *string `pulumi:"name"`
	// Unique identifier for the project object.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a ConfigsClone resource.
type ConfigsCloneArgs struct {
	// Name of the branch config being cloned.
	Config pulumi.StringInput
	// Name of the new branch config.
	Name pulumi.StringPtrInput
	// Unique identifier for the project object.
	Project pulumi.StringInput
}

func (ConfigsCloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configsCloneArgs)(nil)).Elem()
}

type ConfigsCloneInput interface {
	pulumi.Input

	ToConfigsCloneOutput() ConfigsCloneOutput
	ToConfigsCloneOutputWithContext(ctx context.Context) ConfigsCloneOutput
}

func (*ConfigsClone) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsClone)(nil)).Elem()
}

func (i *ConfigsClone) ToConfigsCloneOutput() ConfigsCloneOutput {
	return i.ToConfigsCloneOutputWithContext(context.Background())
}

func (i *ConfigsClone) ToConfigsCloneOutputWithContext(ctx context.Context) ConfigsCloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigsCloneOutput)
}

type ConfigsCloneOutput struct{ *pulumi.OutputState }

func (ConfigsCloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigsClone)(nil)).Elem()
}

func (o ConfigsCloneOutput) ToConfigsCloneOutput() ConfigsCloneOutput {
	return o
}

func (o ConfigsCloneOutput) ToConfigsCloneOutputWithContext(ctx context.Context) ConfigsCloneOutput {
	return o
}

func (o ConfigsCloneOutput) Config() ConfigPropertiesOutput {
	return o.ApplyT(func(v *ConfigsClone) ConfigPropertiesOutput { return v.Config }).(ConfigPropertiesOutput)
}

// Name of the new branch config.
func (o ConfigsCloneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigsClone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier for the project object.
func (o ConfigsCloneOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigsClone) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigsCloneInput)(nil)).Elem(), &ConfigsClone{})
	pulumi.RegisterOutputType(ConfigsCloneOutput{})
}
