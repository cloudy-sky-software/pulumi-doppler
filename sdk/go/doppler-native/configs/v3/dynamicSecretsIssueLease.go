// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DynamicSecretsIssueLease struct {
	pulumi.CustomResourceState

	// The config where the dynamic secret is located
	Config pulumi.StringOutput `pulumi:"config"`
	// The name of the dynamic secret for which to issue this lease
	DynamicSecret pulumi.StringOutput    `pulumi:"dynamicSecret"`
	ExpiresAt     pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// The project where the dynamic secret is located
	Project pulumi.StringOutput  `pulumi:"project"`
	Success pulumi.BoolPtrOutput `pulumi:"success"`
	// The number of seconds until this lease is automatically revoked
	TtlSec pulumi.IntOutput `pulumi:"ttlSec"`
	Value  pulumi.AnyOutput `pulumi:"value"`
}

// NewDynamicSecretsIssueLease registers a new resource with the given unique name, arguments, and options.
func NewDynamicSecretsIssueLease(ctx *pulumi.Context,
	name string, args *DynamicSecretsIssueLeaseArgs, opts ...pulumi.ResourceOption) (*DynamicSecretsIssueLease, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.DynamicSecret == nil {
		return nil, errors.New("invalid value for required argument 'DynamicSecret'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.TtlSec == nil {
		return nil, errors.New("invalid value for required argument 'TtlSec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynamicSecretsIssueLease
	err := ctx.RegisterResource("doppler-native:configs/v3:DynamicSecretsIssueLease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicSecretsIssueLease gets an existing DynamicSecretsIssueLease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicSecretsIssueLease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicSecretsIssueLeaseState, opts ...pulumi.ResourceOption) (*DynamicSecretsIssueLease, error) {
	var resource DynamicSecretsIssueLease
	err := ctx.ReadResource("doppler-native:configs/v3:DynamicSecretsIssueLease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamicSecretsIssueLease resources.
type dynamicSecretsIssueLeaseState struct {
}

type DynamicSecretsIssueLeaseState struct {
}

func (DynamicSecretsIssueLeaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretsIssueLeaseState)(nil)).Elem()
}

type dynamicSecretsIssueLeaseArgs struct {
	// The config where the dynamic secret is located
	Config string `pulumi:"config"`
	// The name of the dynamic secret for which to issue this lease
	DynamicSecret string `pulumi:"dynamicSecret"`
	// The project where the dynamic secret is located
	Project string `pulumi:"project"`
	// The number of seconds until this lease is automatically revoked
	TtlSec int `pulumi:"ttlSec"`
}

// The set of arguments for constructing a DynamicSecretsIssueLease resource.
type DynamicSecretsIssueLeaseArgs struct {
	// The config where the dynamic secret is located
	Config pulumi.StringInput
	// The name of the dynamic secret for which to issue this lease
	DynamicSecret pulumi.StringInput
	// The project where the dynamic secret is located
	Project pulumi.StringInput
	// The number of seconds until this lease is automatically revoked
	TtlSec pulumi.IntInput
}

func (DynamicSecretsIssueLeaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicSecretsIssueLeaseArgs)(nil)).Elem()
}

type DynamicSecretsIssueLeaseInput interface {
	pulumi.Input

	ToDynamicSecretsIssueLeaseOutput() DynamicSecretsIssueLeaseOutput
	ToDynamicSecretsIssueLeaseOutputWithContext(ctx context.Context) DynamicSecretsIssueLeaseOutput
}

func (*DynamicSecretsIssueLease) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretsIssueLease)(nil)).Elem()
}

func (i *DynamicSecretsIssueLease) ToDynamicSecretsIssueLeaseOutput() DynamicSecretsIssueLeaseOutput {
	return i.ToDynamicSecretsIssueLeaseOutputWithContext(context.Background())
}

func (i *DynamicSecretsIssueLease) ToDynamicSecretsIssueLeaseOutputWithContext(ctx context.Context) DynamicSecretsIssueLeaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicSecretsIssueLeaseOutput)
}

type DynamicSecretsIssueLeaseOutput struct{ *pulumi.OutputState }

func (DynamicSecretsIssueLeaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicSecretsIssueLease)(nil)).Elem()
}

func (o DynamicSecretsIssueLeaseOutput) ToDynamicSecretsIssueLeaseOutput() DynamicSecretsIssueLeaseOutput {
	return o
}

func (o DynamicSecretsIssueLeaseOutput) ToDynamicSecretsIssueLeaseOutputWithContext(ctx context.Context) DynamicSecretsIssueLeaseOutput {
	return o
}

// The config where the dynamic secret is located
func (o DynamicSecretsIssueLeaseOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretsIssueLease) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The name of the dynamic secret for which to issue this lease
func (o DynamicSecretsIssueLeaseOutput) DynamicSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretsIssueLease) pulumi.StringOutput { return v.DynamicSecret }).(pulumi.StringOutput)
}

func (o DynamicSecretsIssueLeaseOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicSecretsIssueLease) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The project where the dynamic secret is located
func (o DynamicSecretsIssueLeaseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicSecretsIssueLease) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DynamicSecretsIssueLeaseOutput) Success() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DynamicSecretsIssueLease) pulumi.BoolPtrOutput { return v.Success }).(pulumi.BoolPtrOutput)
}

// The number of seconds until this lease is automatically revoked
func (o DynamicSecretsIssueLeaseOutput) TtlSec() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicSecretsIssueLease) pulumi.IntOutput { return v.TtlSec }).(pulumi.IntOutput)
}

func (o DynamicSecretsIssueLeaseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v *DynamicSecretsIssueLease) pulumi.AnyOutput { return v.Value }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicSecretsIssueLeaseInput)(nil)).Elem(), &DynamicSecretsIssueLease{})
	pulumi.RegisterOutputType(DynamicSecretsIssueLeaseOutput{})
}
