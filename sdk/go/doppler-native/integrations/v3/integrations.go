// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Integrations struct {
	pulumi.CustomResourceState

	// The authentication data for the integration
	Data        pulumi.AnyOutput               `pulumi:"data"`
	Integration IntegrationPropertiesPtrOutput `pulumi:"integration"`
	// The name of the integration
	Name pulumi.StringOutput `pulumi:"name"`
	// The integration type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIntegrations registers a new resource with the given unique name, arguments, and options.
func NewIntegrations(ctx *pulumi.Context,
	name string, args *IntegrationsArgs, opts ...pulumi.ResourceOption) (*Integrations, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Integrations
	err := ctx.RegisterResource("doppler-native:integrations/v3:Integrations", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrations gets an existing Integrations resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrations(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationsState, opts ...pulumi.ResourceOption) (*Integrations, error) {
	var resource Integrations
	err := ctx.ReadResource("doppler-native:integrations/v3:Integrations", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integrations resources.
type integrationsState struct {
}

type IntegrationsState struct {
}

func (IntegrationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationsState)(nil)).Elem()
}

type integrationsArgs struct {
	// The authentication data for the integration
	Data interface{} `pulumi:"data"`
	// The name of the integration
	Name *string `pulumi:"name"`
	// The integration type
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Integrations resource.
type IntegrationsArgs struct {
	// The authentication data for the integration
	Data pulumi.Input
	// The name of the integration
	Name pulumi.StringPtrInput
	// The integration type
	Type pulumi.StringInput
}

func (IntegrationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationsArgs)(nil)).Elem()
}

type IntegrationsInput interface {
	pulumi.Input

	ToIntegrationsOutput() IntegrationsOutput
	ToIntegrationsOutputWithContext(ctx context.Context) IntegrationsOutput
}

func (*Integrations) ElementType() reflect.Type {
	return reflect.TypeOf((**Integrations)(nil)).Elem()
}

func (i *Integrations) ToIntegrationsOutput() IntegrationsOutput {
	return i.ToIntegrationsOutputWithContext(context.Background())
}

func (i *Integrations) ToIntegrationsOutputWithContext(ctx context.Context) IntegrationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationsOutput)
}

type IntegrationsOutput struct{ *pulumi.OutputState }

func (IntegrationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Integrations)(nil)).Elem()
}

func (o IntegrationsOutput) ToIntegrationsOutput() IntegrationsOutput {
	return o
}

func (o IntegrationsOutput) ToIntegrationsOutputWithContext(ctx context.Context) IntegrationsOutput {
	return o
}

// The authentication data for the integration
func (o IntegrationsOutput) Data() pulumi.AnyOutput {
	return o.ApplyT(func(v *Integrations) pulumi.AnyOutput { return v.Data }).(pulumi.AnyOutput)
}

func (o IntegrationsOutput) Integration() IntegrationPropertiesPtrOutput {
	return o.ApplyT(func(v *Integrations) IntegrationPropertiesPtrOutput { return v.Integration }).(IntegrationPropertiesPtrOutput)
}

// The name of the integration
func (o IntegrationsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Integrations) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The integration type
func (o IntegrationsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Integrations) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationsInput)(nil)).Elem(), &Integrations{})
	pulumi.RegisterOutputType(IntegrationsOutput{})
}
