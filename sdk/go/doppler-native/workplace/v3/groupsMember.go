// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupsMember struct {
	pulumi.CustomResourceState

	// The member's slug
	Slug pulumi.StringOutput `pulumi:"slug"`
	Type TypeOutput          `pulumi:"type"`
}

// NewGroupsMember registers a new resource with the given unique name, arguments, and options.
func NewGroupsMember(ctx *pulumi.Context,
	name string, args *GroupsMemberArgs, opts ...pulumi.ResourceOption) (*GroupsMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupsMember
	err := ctx.RegisterResource("doppler-native:workplace/v3:GroupsMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupsMember gets an existing GroupsMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupsMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupsMemberState, opts ...pulumi.ResourceOption) (*GroupsMember, error) {
	var resource GroupsMember
	err := ctx.ReadResource("doppler-native:workplace/v3:GroupsMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupsMember resources.
type groupsMemberState struct {
}

type GroupsMemberState struct {
}

func (GroupsMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupsMemberState)(nil)).Elem()
}

type groupsMemberArgs struct {
	// The group's slug
	Slug string `pulumi:"slug"`
	Type Type   `pulumi:"type"`
}

// The set of arguments for constructing a GroupsMember resource.
type GroupsMemberArgs struct {
	// The group's slug
	Slug pulumi.StringInput
	Type TypeInput
}

func (GroupsMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupsMemberArgs)(nil)).Elem()
}

type GroupsMemberInput interface {
	pulumi.Input

	ToGroupsMemberOutput() GroupsMemberOutput
	ToGroupsMemberOutputWithContext(ctx context.Context) GroupsMemberOutput
}

func (*GroupsMember) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupsMember)(nil)).Elem()
}

func (i *GroupsMember) ToGroupsMemberOutput() GroupsMemberOutput {
	return i.ToGroupsMemberOutputWithContext(context.Background())
}

func (i *GroupsMember) ToGroupsMemberOutputWithContext(ctx context.Context) GroupsMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsMemberOutput)
}

type GroupsMemberOutput struct{ *pulumi.OutputState }

func (GroupsMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupsMember)(nil)).Elem()
}

func (o GroupsMemberOutput) ToGroupsMemberOutput() GroupsMemberOutput {
	return o
}

func (o GroupsMemberOutput) ToGroupsMemberOutputWithContext(ctx context.Context) GroupsMemberOutput {
	return o
}

// The member's slug
func (o GroupsMemberOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupsMember) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o GroupsMemberOutput) Type() TypeOutput {
	return o.ApplyT(func(v *GroupsMember) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsMemberInput)(nil)).Elem(), &GroupsMember{})
	pulumi.RegisterOutputType(GroupsMemberOutput{})
}
