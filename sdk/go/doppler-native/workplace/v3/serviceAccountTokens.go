// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceAccountTokens struct {
	pulumi.CustomResourceState

	ApiKey   pulumi.StringPtrOutput      `pulumi:"apiKey"`
	ApiToken ApiTokenPropertiesPtrOutput `pulumi:"apiToken"`
	// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// The display name of the API token
	Name    pulumi.StringPtrOutput `pulumi:"name"`
	Success pulumi.BoolPtrOutput   `pulumi:"success"`
}

// NewServiceAccountTokens registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountTokens(ctx *pulumi.Context,
	name string, args *ServiceAccountTokensArgs, opts ...pulumi.ResourceOption) (*ServiceAccountTokens, error) {
	if args == nil {
		args = &ServiceAccountTokensArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccountTokens
	err := ctx.RegisterResource("doppler-native:workplace/v3:ServiceAccountTokens", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountTokens gets an existing ServiceAccountTokens resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountTokens(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountTokensState, opts ...pulumi.ResourceOption) (*ServiceAccountTokens, error) {
	var resource ServiceAccountTokens
	err := ctx.ReadResource("doppler-native:workplace/v3:ServiceAccountTokens", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountTokens resources.
type serviceAccountTokensState struct {
}

type ServiceAccountTokensState struct {
}

func (ServiceAccountTokensState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokensState)(nil)).Elem()
}

type serviceAccountTokensArgs struct {
	// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
	ExpiresAt *string `pulumi:"expiresAt"`
	// The display name of the API token
	Name *string `pulumi:"name"`
	// Slug of the service account
	ServiceAccount *string `pulumi:"serviceAccount"`
}

// The set of arguments for constructing a ServiceAccountTokens resource.
type ServiceAccountTokensArgs struct {
	// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
	ExpiresAt pulumi.StringPtrInput
	// The display name of the API token
	Name pulumi.StringPtrInput
	// Slug of the service account
	ServiceAccount pulumi.StringPtrInput
}

func (ServiceAccountTokensArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokensArgs)(nil)).Elem()
}

type ServiceAccountTokensInput interface {
	pulumi.Input

	ToServiceAccountTokensOutput() ServiceAccountTokensOutput
	ToServiceAccountTokensOutputWithContext(ctx context.Context) ServiceAccountTokensOutput
}

func (*ServiceAccountTokens) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTokens)(nil)).Elem()
}

func (i *ServiceAccountTokens) ToServiceAccountTokensOutput() ServiceAccountTokensOutput {
	return i.ToServiceAccountTokensOutputWithContext(context.Background())
}

func (i *ServiceAccountTokens) ToServiceAccountTokensOutputWithContext(ctx context.Context) ServiceAccountTokensOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokensOutput)
}

type ServiceAccountTokensOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokensOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTokens)(nil)).Elem()
}

func (o ServiceAccountTokensOutput) ToServiceAccountTokensOutput() ServiceAccountTokensOutput {
	return o
}

func (o ServiceAccountTokensOutput) ToServiceAccountTokensOutputWithContext(ctx context.Context) ServiceAccountTokensOutput {
	return o
}

func (o ServiceAccountTokensOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokens) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o ServiceAccountTokensOutput) ApiToken() ApiTokenPropertiesPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokens) ApiTokenPropertiesPtrOutput { return v.ApiToken }).(ApiTokenPropertiesPtrOutput)
}

// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
func (o ServiceAccountTokensOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokens) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The display name of the API token
func (o ServiceAccountTokensOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokens) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServiceAccountTokensOutput) Success() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTokens) pulumi.BoolPtrOutput { return v.Success }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokensInput)(nil)).Elem(), &ServiceAccountTokens{})
	pulumi.RegisterOutputType(ServiceAccountTokensOutput{})
}
